{"data":{"css":"","data":[],"name":"case","js":"var me = this;\nvar ME = $('#'+me.UUID)[0];\n\nme.animate = function(model){\n  me.model = model;\n  me.type = \"case\";\n  me.inputbar = me.children[0];\n  me.outputbar = me.children[1];\n  if (!me.cmds) me.cmds = [];\n  me.inputbar.api.parent = me;\n  me.inputbar.api.direction = \"src\";\n  me.inputbar.api.minw = 3;\n  me.inputbar.api.updateWidth();\n  me.outputbar.api.parent = me;\n  me.outputbar.api.direction = \"dst\";\n  me.outputbar.api.minw = 3;\n  me.outputbar.api.updateWidth();\n  \n  me.setData(ME.DATA);\n  \n  var thediv = $(\"#\"+me.model.scene.viewer.UUID);\n  thediv[0].lastDrag = 0; // FIXME - Sloppy (node sets lastDrag on both drag and drop, should use something other than proximity in time to suppress click).\n  thediv.click(function(e){\n    if (me.target_z == 0 && !e.handled && new Date().getTime() - thediv[0].lastDrag > 500) {\n      if (e.shiftKey) {\n        e.handled = true;\n        var pos = me.model.scene.viewer.to3D(e.clientX, e.clientY);\n        pos.x -= me.model.rig.pos_x;\n        pos.y -= me.model.rig.pos_y;\n        pos.z -= me.model.rig.pos_z;\n        \n        var ctl = {\n            \"pos\": pos,\n            \"name\": \"untitled\",\n            \"type\": \"local\"\n        };\n        me.addOperation(ctl);\n        me.dirty();\n      }\n      else {\n        me.select(null);\n      }\n    }\n    //e.preventDefault();\n    return false;\n  });\n};\n\nme.editCase = function(casedata, cb){\n  me.parent.editCase(casedata, cb);\n};\n\nme.render = function(model){\n  var pos = Number(me.model.rig.pos_z);\n  var target = me.target_z ? me.target_z : 0;\n  if (pos != target) {\n    var amt = pos < target ? 0.5 : -0.5;\n    pos += amt;\n    me.model.rig.pos_z = pos;\n  }\n  me.inputbar.api.target_z = me.target_z;\n  me.outputbar.api.target_z = me.target_z;\n  for (var i in me.cmds) me.cmds[i].target_z = me.target_z;\n};\n\nme.dirty = function(){\n  me.parent.dirty();\n};\n\nme.getCode = function(){\n  var cmds = [];\n  var cons = [];\n  var d = {\n    \"cons\": cons,\n    \"cmds\": cmds,\n    \"input\": me.inputbar.api.getCode(),\n    \"output\": me.outputbar.api.getCode()\n  };  \n  \n  var list = [];\n  for (var i=0; i<me.cmds.length; i++){\n    var o = me.cmds[i];\n    var cmd = o.getCode();\n    cmds.push(cmd);\n    list.push(o.inputbar);\n  }\n  \n  list.push(me.outputbar);\n  for (var i=0; i<list.length; i++){\n    var o = list[i];\n    for (var j=0; j<o.api.nodes.length; j++){\n      var dst = o.api.nodes[j];\n      var src = dst.target;\n      if (src){\n        var srccmd = src.parent.parent;\n        var srcindex = me.cmds.indexOf(srccmd);\n        var srcname = src.data.name;\n        var dstindex = i<list.length-1 ? i : -2;\n        var dstname = dst.data.name;\n        var con = {\n          \"src\": [ srcindex, srcname ],\n          \"dest\": [ dstindex, dstname ]\n        };\n        cons.push(con);\n      }\n    }\n  }\n  \n  return d;\n};\n\nme.addOperation = function(ctl, cb){\n  var pos = ctl.pos ? ctl.pos : new THREE.Vector3(0,0,0);\n  var el = $('<div/>');\n  $(ME).append(el);\n  ctl.onready = cb;\n  me.model.scene.viewer.add(el[0], \"flow\", \"operation\", function(model){\n    me.children.push(model);\n    me.cmds.push(model.api);\n    model.rig.pos_x = pos.x / 1000;\n    model.rig.pos_y = pos.y / 1000;\n    model.rig.pos_z = pos.z / 1000;\n    model.api.parent = me;\n  }, ctl, me.model.group);\n};\n\nme.setNodes = function(data, cb){\n  var count = 0;\n  var cb2 = function(){\n    if (++count == 2 && cb) cb();\n  };\n  \n  if (data.in) me.inputbar.api.setNodes(data.in, cb2);\n  else cb2();\n  if (data.out) me.outputbar.api.setNodes(data.out, cb2);\n  else cb2();\n};\n\nme.setData = function(data, cb){\n  me.data = data;\n  var inputnodes = data.input ? data.input : {};\n  var outputnodes = data.output ? data.output : {};\n  \n  for (var i=0; i<me.data.cons.length; i++){\n    var con = me.data.cons[i];\n    if (con.src[0] == -1){\n      var name = con.src[1];\n      if (!inputnodes[name]) inputnodes[name] = {};\n    }\n    if (con.dest[0] == -2){\n      var name = con.dest[1];\n      if (!outputnodes[name]) outputnodes[name] = {};\n    }\n  }\n  \n  var count = 2;\n  var firsttime = true;\n  var cb2 = function(){\n    if (--count == 0) {\n      if (firsttime) {\n        firsttime = false;\n        count = me.data.cmds.length;\n        for (var i=0; i<me.data.cmds.length; i++) {\n          me.addOperation(me.data.cmds[i], cb2);\n        }\n      }\n      else {\n        for (var i=0; i<me.data.cons.length; i++){\n          var con = me.data.cons[i];\n          var src = null;\n          if (con.src[0] == -1) src = me.inputbar.api.getNodeByName(con.src[1]);;\n          var dest = null;\n          if (con.dest[0] == -2) dest = me.outputbar.api.getNodeByName(con.dest[1]);;\n          for (var j=0; j<me.cmds.length; j++){\n            if (me.cmds[j].data == me.data.cmds[con.src[0]]) src = me.cmds[j].outputbar.api.getNodeByName(con.src[1]);\n            else if (me.cmds[j].data == me.data.cmds[con.dest[0]]) dest = me.cmds[j].inputbar.api.getNodeByName(con.dest[1]);\n            if (src && dest) break;\n          }\n          var v1 = src.parent.model.group.localToWorld(new THREE.Vector3(src.model.rig.pos_x,0,0));\n          var v2 = dest.parent.model.group.localToWorld(new THREE.Vector3(dest.model.rig.pos_x,0,0));\n          var geometry = new THREE.Geometry();\n          geometry.vertices.push(v1, v2);\n          var material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n          var mesh = dest.line = new THREE.Line( geometry, material );\n          me.model.scene.add(mesh);\n          dest.target = src;\n          if (!src.targets) src.targets = [];\n          src.targets.push(dest);\n        }\n        \n        if (cb) cb();\n      }\n    }\n  };\n  me.inputbar.api.setNodes(inputnodes, cb2);\n  me.outputbar.api.setNodes(outputnodes, cb2);\n};\n\nme.deleteSelected = function(){\n  var o = me.selected;\n  if (o) {\n    me.select(null);\n    if (o.delete) o.delete();\n  }\n}\n\nme.select = function(api) {\n  if (me.selected && me.selected.unselect) me.selected.unselect();\n  me.selected = api;\n  if (api && api.select) api.select();\n  console.log(\"SELECTED:\");\n  console.log(api);\n}\n","groups":"anonymous","ctl":"kwhqqh178da8fa350z18","html":"","three":{"controls":[{"nodes":[],"pos":{"x":"0","y":"3.5","z":"0"},"rot":{"x":0,"y":0,"z":0},"name":"inputbar","scale":{"x":1,"y":1,"z":1},"id":"ownorw178d6b6e9d8j1f","uuid":"33597592-d6f1-4d81-87bc-b3f707854739","db":"flow"},{"nodes":[],"pos":{"x":"0","y":"-3.5","z":"0"},"rot":{"x":0,"y":0,"z":0},"name":"outputbar","scale":{"x":1,"y":1,"z":1},"id":"ownorw178d6b6e9d8j1f","uuid":"74a95eb8-7163-48e9-978c-d84d18b2346b","db":"flow"}]},"db":"flow","desc":""},"readers":["anonymous"],"id":"kwhqqh178da8fa350z18","sessionid":"jvgvwg16b7a4d277bt3","time":1620138932777,"addr":"/0:0:0:0:0:0:0:1:51934","username":"admin"}