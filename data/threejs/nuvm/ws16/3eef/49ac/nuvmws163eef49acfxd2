{"data":{"css":"#webGL-container{\n  position:relative;\n  top:0px;\n  left:0px;\n  width:100%;\n  height:100%;\n  background-color:transparent;\n}\n\n.imagebackground, .imageoverlay {\n  position:absolute;\n  top:0px;\n  left:0px;\n  width:100%;\n  height:100%;\n  background-position:center center;\n  background-repeat:no-repeat;\n  background-size:contain;\n  background-color:transparent;\n  pointer-events : none;\n}","data":[],"name":"viewer","js":"var me = this;\nvar ME = $('#'+me.UUID)[0];\n\nvar container, stats, clock, controls;\nvar camera, scene, renderer, mixer, models, avatar, toload;\n\nvar datprefix = $(ME).data('datguipath') ? $(ME).data('datguipath') : '../botmanager/asset/threejs/dat.gui-master/';\nvar libprefix = $(ME).data('threepath') ? $(ME).data('threepath') : '../botmanager/asset/threejs/three.js-master/';\nvar libs = [\n  'build/three.min.js',\n  'examples/js/controls/OrbitControls.js',\n  'examples/js/Detector.js',\n  'examples/js/libs/stats.min.js'\n];\n\nmodels = me.models = [];\nvar count = 0;\nvar done = false;\nvar mouse = {};\nvar callbacks = [];\nme.waitReady = function(cb){\n  callbacks.push(cb);\n  checkIfDone();\n};\n\nfunction checkIfDone(){\n  if (done) {\n    while (callbacks.length>0) callbacks.shift()(me);\n  }\n}\n\nme.removeModel = function(model){\n  for (var i in model.models)\n    me.scene.remove(model.models[i]);\n  var name = model.UUID;\n  var folder = me.datGUI.__folders[name];\n  if (folder) {\n    folder.close();\n    me.datGUI.__ul.removeChild(folder.domElement.parentNode);\n    delete me.datGUI.__folders[name];\n    me.datGUI.onResize();  \n  }  \n  var i = me.models.indexOf(model);\n  if (i != -1)\n    me.models.splice(i,1);\n}\n\nme.loadModel = function(el, assets, animations, db, pos, rot, scale, cb){\n  $(el).data('datgui', me.datGUI);\n  $(el).data('scene', scene);\n  if (assets) $(el).data('assets', assets);\n  if (animations) $(el).data('animations', animations);\n  if (db) $(el).data('db', db);\n  if (pos) $(el).data('pos', pos);\n  if (rot) $(el).data('rot', rot);\n  if (scale) $(el).data('scale', scale);\n\n  var ani1 = animations;\n  var ani2 = [];\n\n  function loadModel(){\n    installControl(el, \"threejs\", \"jsonloader\", function(api){\n      api.api = {};\n      models.push(api);\n\n      for (var i in ani2) {\n        var a2i = ani2[i];\n        if (a2i.animate) a2i.animate(api);\n        if (a2i.render) api.animations.push(a2i.render);\n      }\n      if (cb) api.onload(cb);\n    }, {});\n  }\n  \n  if (ani1){\n    function loadNext(){\n      if (ani1.list.length > 0){\n        var ani = ani1.list.shift();\n        var i = ani.indexOf(':');\n        var dbi = i == -1 ? db : ani.substring(0,i);\n        ani = i == -1 ? ani : ani.substring(i+1);\n        installControl(el, dbi, ani, function(animation){\n          ani2.push(animation);\n          loadNext();\n        }, {});\n      }\n      else loadModel();\n    }\n    loadNext();\n  }\n  else loadModel();\n  \n};\n\nme.add = function(el, db, id, cb, data, parentgroup){\n  // FIXME combine with me.loadModel\n  $(el).data('datgui', me.datGUI);\n  $(el).data('scene', scene);\n  $(el).data('db', db);\n  if (!data) data = {};\n\n  var group = new THREE.Group();\n//  if (data.pos) group.position.copy(data.pos);\n//  if (data.rot) group.rotation.copy(data.rot);\n//  if (data.scale) group.scale.copy(data.scale);\n  \n  if (parentgroup) parentgroup.add(group);\n  else scene.add(group);\n  $(el).data('group', group);\n\n  installControl(el, db, id, function(api){\n    var current = api;\n    api.group = group;\n    group.api = api;\n\n    var ani1 = $(el).data('animations');\n    var ani2 = [];\n    var anim = api.animate;\n    var rend = api.render;\n    var meta = $(el)[0].meta;\n    \n    var forward = function(){\n      var three = meta.three;\n\n      function loadModel(){\n        installControl(el, \"threejs\", \"jsonloader\", function(api){\n          api.api = current;\n          current.model = api;\n          models.push(api);\n\n          for (var i in ani2) {\n            var a2i = ani2[i];\n            if (a2i.animate) a2i.animate(api);\n            if (a2i.render) api.animations.push(a2i.render);\n          }\n          loadControls(api);\n        }, data);\n      }    \n\n      function finish(api){\n        if (anim) anim(api);\n        if (rend) api.animations.push(rend);\n        if (cb) api.onload(cb);\n      }\n\n      function loadControls(api){\n        if (three){\n          if (three.controls){\n            var l = three.controls.slice();\n            function nextCtl(){\n              if (l.length>0){\n                var ctl = Object.assign({}, l.shift());\n                var el2 = $('<div style=\"position:absolute;top:0px;\"/>');\n                $(ME).append(el2);\n                me.add(el2[0], ctl.db, ctl.id, function(api){\n                  api.parent = current;\n                  if (!current.children) current.children = [];\n                  current.children.push(api);\n                  nextCtl();\n                }, ctl, group);\n              }\n              else finish(api);\n            }\n            nextCtl();\n          }\n          else finish(api);\n        }\n        else finish(api);\n      }\n\n      if (ani1){\n        function loadNext(){\n          if (ani1.list.length > 0){\n            var ani = ani1.list.shift();\n            installControl(el, db, ani, function(animation){\n              ani2.push(animation);\n              loadNext();\n            }, data);\n          }\n          else loadModel();\n        }\n        loadNext();\n      }\n      else loadModel();\n    }\n    if (!meta) setTimeout(forward,100);\n    else forward();\n  }, data);\n};\n\nme.ready = function(){\n  var libindex = 0;\n  function loadNext(){\n    if (libindex<libs.length) promise = doAfterLoading(promise, libprefix + libs[libindex++], loadNext);\n    else  {\n      if ( ! Detector.webgl ) Detector.addGetWebGLMessage();\n\n      toload = $(ME).data('controls');\n      if (!toload) toload = [];\n      \n      startup();\n    }\n  }\n  var promise = $.when(true);\n  promise = doAfterLoading(promise,  datprefix+'build/dat.gui.min.js', loadNext);\n};\n\nfunction loadScript( url, cb ) {\n  return $.getScript( url, function() { cb(); });\n}\n\nfunction doAfterLoading(promise, url, cb){\n  return promise.then(function () {\n    return loadScript( url, cb );\n  });\n}\n\nfunction startup(){\n  /*global variables*/\n  var controls, guiControls, datGUI;\n  var stats;\n  var spotLight, hemi;\n  var loader, model;\n  \n  \n  function init(){\n    /*creates empty scene object and renderer*/\n    scene = me.scene = new THREE.Scene();\n    camera = scene.camera = new THREE.PerspectiveCamera(45, $(ME).width()/$(ME).height(), .1, 500);\n    renderer = me.renderer = new THREE.WebGLRenderer({antialias:true, alpha: true});\n    \n    scene.viewer = me;\n    \n//    renderer.setClearColor(0x333300);\n    renderer.setSize($(ME).width(), $(ME).height());\n    renderer.shadowMapEnabled= true;\n    renderer.shadowMapSoft = true;\n    \n    /*add controls*/\n    if ($(ME).data('orbitcontrols') == true){\n      controls = me.controls = new THREE.OrbitControls( camera, renderer.domElement );\n      controls.addEventListener( 'change', render );\n    }\n    \n    camera.position.x = 6;\n    camera.position.y = 2;\n    camera.position.z = 6;    \n    camera.lookAt(scene.position);\n\n    /*datGUI controls object*/\n    guiControls = new function(){\n      this.rotationX  = 0.0;\n      this.rotationY  = 0.0;\n      this.rotationZ  = 0.0;\n      \n      this.lightX = 131;\n      this.lightY = 107;\n      this.lightZ = 180;\n      this.intensity = 1.5;       \n      this.distance = 373;\n      this.angle = 1.6;\n      this.exponent = 38;\n      this.shadowCameraNear = 34;\n      this.shadowCameraFar = 2635;\n      this.shadowCameraFov = 68;\n      this.shadowCameraVisible=false;\n      this.shadowMapWidth=512;\n      this.shadowMapHeight=512;\n      this.shadowBias=0.00;\n      this.shadowDarkness=0.11;\n      \n      this.scene = function(){\n      };\n\n      function resetMouse(){\n        mouse.down = false;\n        mouse.model = null;\n        mouse.over = null;\n        mouse.three = null;\n      }\n      \n      $(ME).mousedown(function(event){\n        if (mouse.down) $(ME).mouseup(event);\n        \n        var model = mouse.model = findClick(event);\n        mouse.three = event.three;\n        mouse.down = true;\n        if (model && model.mousedown) return model.mousedown(event);\n      });\n      \n      $(ME).mouseup(function(event){\n        var model = findClick(event);\n        var x = null;\n        if (mouse.model && mouse.model.drop) x = mouse.model.drop(event, model);\n        if (mouse.model && mouse.model.mouseup) x = mouse.model.mouseup(event);\n        resetMouse();\n        return x;\n      });\n      \n      $(ME).mousemove(function(event){\n        var model = findClick(event);\n        if (model && model.mousemove) model.mousemove(event);\n        \n        if (mouse.down && mouse.model && model && model.dragover) {\n          if (mouse.over && mouse.over != model && mouse.over.dragoff) mouse.over.dragoff(event);\n          mouse.over = model;\n          model.dragover(event, mouse.model);\n        }\n        else if (!model && mouse.over && mouse.over.dragoff) {\n          mouse.over.dragoff(event);\n          mouse.over = null;\n        }\n        \n        if (mouse.down && mouse.model && mouse.model.drag){\n\n          var camdir = mouse.model.scene.camera.getWorldDirection();\n          var campos = mouse.model.scene.camera.position;\n          var dir = event.three.ray.direction;\n          var origin = mouse.three.intersect.point;\n          var a = camdir.x;\n          var b = camdir.y;\n          var c = camdir.z;\n          var t = ((a * origin.x) + (b * origin.y) + (c * origin.z) - (a*campos.x) - (b*campos.y) - (c*campos.z)) / (((a*dir.x) + (b*dir.y) + (c*dir.z)));\n          var p = event.three.ray.direction.clone().multiplyScalar(t).add(event.three.ray.origin);\n\n          event.three.drag = p;\n          return mouse.model.drag(event);\n        }\n      });\n            \n      $(ME).click(function(event){\n        var model = findClick(event);\n        if (model && model.click) return model.click(event);\n      });\n      \n      $(ME).dblclick(function(event){\n        var model = findClick(event);\n        if (model && model.dblclick) return model.dblclick(event);\n      });\n    }\n    \n    function findClick(event){\n      event.three = {};\n      var clientX = event.clientX - $(ME).offset().left;\n      var clientY = event.clientY - $(ME).offset().top;\n      var vector = new THREE.Vector3(\n          ( clientX / $(ME).width() ) * 2 - 1,\n        - ( clientY / $(ME).height() ) * 2 + 1,\n          0.5\n      );\n\n      vector.unproject(camera);\n\n      var ray = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );\n      event.three.ray = ray.ray;\n\n      function pushKids(m, l1, l2){\n        for (var j in m.models) {\n          l1.push(m.models[j]);\n          l2.push(m);\n        }\n      }\n      \n      var l1 = []\n      var l2 = []\n      for (var i in me.models) pushKids(me.models[i], l1, l2);\n      var intersects = ray.intersectObjects( l1 );\n\n      if ( intersects.length > 0 ) {\n        event.three.intersect = intersects[0];\n        var i = l1.indexOf(event.three.intersect.object);\n        return l2[i];\n      }\n      return null;\n    }\n      \n    //add some nice lighting\n    hemi = new THREE.HemisphereLight( 0xffffff, 0xffffff );\n    scene.add(hemi);\n    //add some fog\n    scene.fog = new THREE.Fog( 0xffff90, .01, 500 );\n\n    /*adds spot light with starting parameters*/\n    spotLight = new THREE.SpotLight(0xffffff);\n    spotLight.castShadow = true;\n    spotLight.position.set (20, 35, 40);\n    spotLight.intensity = guiControls.intensity;        \n    spotLight.distance = guiControls.distance;\n    spotLight.angle = guiControls.angle;\n    spotLight.exponent = guiControls.exponent;\n    spotLight.shadowCameraNear = guiControls.shadowCameraNear;\n    spotLight.shadowCameraFar = guiControls.shadowCameraFar;\n    spotLight.shadowCameraFov = guiControls.shadowCameraFov;\n    spotLight.shadowCameraVisible = guiControls.shadowCameraVisible;\n    spotLight.shadowBias = guiControls.shadowBias;\n    spotLight.shadowDarkness = guiControls.shadowDarkness;\n    scene.add(spotLight);\n      \n    /*adds controls to scene*/\n    if ($(ME).data('showdatgui') == true){\n      datGUI = me.datGUI = new dat.GUI();\n      datGUI.add(guiControls, \"scene\");\n//      datGUI.close();\n    }\n    else {\n      datGUI = me.datGUI = {}; \n    \n      datGUI.addFolder = function(){\n        var f = {};\n        var f2 = {};\n        f.add = f2.name = function(){\n          f2.onChange = function(){};\n          return f2;\n        };\n        return f;\n      };\n    }\n    \n    $(\"#webGL-container\").append(renderer.domElement);\n//    stats = new Stats();        \n//    stats.domElement.style.position = 'absolute';\n//    stats.domElement.style.left = '0px';\n//    stats.domElement.style.top = '0px';     \n//    $(\"#webGL-container\").append( stats.domElement );\n    \n    var lfolder = datGUI.addFolder('Lights');\n    lfolder.add(guiControls, 'lightX',-60,400); \n    lfolder.add(guiControls, 'lightY',0,400);   \n    lfolder.add(guiControls, 'lightZ',-60,400);\n    \n    lfolder.add(guiControls, 'intensity',0.01, 5).onChange(function(value){\n        spotLight.intensity = value;\n    });     \n    lfolder.add(guiControls, 'distance',0, 1000).onChange(function(value){\n        spotLight.distance = value;\n    }); \n    lfolder.add(guiControls, 'angle',0.001, 1.570).onChange(function(value){\n        spotLight.angle = value;\n    });     \n    lfolder.add(guiControls, 'exponent',0 ,50 ).onChange(function(value){\n        spotLight.exponent = value;\n    });\n    lfolder.add(guiControls, 'shadowCameraNear',0,100).name(\"Near\").onChange(function(value){       \n        spotLight.shadowCamera.near = value;\n        spotLight.shadowCamera.updateProjectionMatrix();        \n    });\n    lfolder.add(guiControls, 'shadowCameraFar',0,5000).name(\"Far\").onChange(function(value){\n        spotLight.shadowCamera.far = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowCameraFov',1,180).name(\"Fov\").onChange(function(value){\n        spotLight.shadowCamera.fov = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowCameraVisible').onChange(function(value){\n        spotLight.shadowCameraVisible = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowBias',0,1).onChange(function(value){\n        spotLight.shadowBias = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowDarkness',0,1).onChange(function(value){\n        spotLight.shadowDarkness = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    \n\tfor (var i in toload) {\n      var ctl = toload[i];\n      var el = $('<div id=\"m'+(count++)+'_'+ctl.name+'\"/>')[0];\n      $(ME).append(el);\n      me.add(el, ctl.db, ctl.name);\n    }\n    \n    animate();\n      \n    done = true;\n    checkIfDone();\n  }\n      \n  function render() { \n    spotLight.position.x = guiControls.lightX;\n    spotLight.position.y = guiControls.lightY;\n    spotLight.position.z = guiControls.lightZ;\n    \n    for (var i in models) models[i].render();\n    \n    scene.traverse(function(child) {\n      if  (child instanceof THREE.SkeletonHelper) child.update();\n    });\n    \n    if (me.focus){\n      var model = me.focus;\n      var rig = model.rig;\n      var v = new THREE.Vector3( rig.pos_x, rig.pos_y, rig.pos_z );\n      camera.position.copy(v);\n      camera.position.z += 1;\n      camera.lookAt(v);\n    }\n  }\n  \n  function animate(){\n    requestAnimationFrame(animate);\n    render();\n//    stats.update();     \n    renderer.render(scene, camera);\n  }\n  \n  init();\n  \n  $(window).resize(function(){\n    var w = $(ME).width();\n    var h = $(ME).height();\n    camera.aspect = w / h;\n    camera.updateProjectionMatrix();\n    renderer.setSize( w, h );\n  });\n  \n}\n\nme.to3D = function(x,y){\n  x -= $(ME).offset().left;\n  y -= $(ME).offset().top;\n  \n  var thediv = $(ME);\n  var W = thediv.width();\n  var H = thediv.height();\n\n  var vector = new THREE.Vector3();\n\n  vector.set(\n      ( x / W ) * 2 - 1,\n      - ( y / H ) * 2 + 1,\n      0.5 );\n\n  vector.unproject( camera );\n\n  var dir = vector.sub( camera.position ).normalize();\n  var distance = - camera.position.z / dir.z;\n  var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\n  return pos;\n};\n","groups":"anonymous","ctl":"nuvmws163eef49acfxd2","html":"<div class='imagebackground'><\/div>\n<div id =\"webGL-container\" />\n<div class='imageoverlay'><\/div>\n","three":{"controls":[]},"db":"threejs","desc":""},"readers":["anonymous"],"id":"nuvmws163eef49acfxd2","sessionid":"jvgvwg16b7a4d277bt3","time":1619289308780,"addr":"/0:0:0:0:0:0:0:1:51376","username":"admin"}