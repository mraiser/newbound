{"data":{"css":"","data":[],"name":"shape","js":"var me = this;\nvar ME = $('#'+me.UUID)[0];\n\nme.data = ME.DATA;\n\nme.animate = function(model){\n  me.model = model;\n  me.rebuild();\n};\n\nme.setColor = function(r, g, b){\n  var c = me.model.models[0].material.color;\n  c.r = r;\n  c.g = g;\n  c.b = b;\n}\n\n// FIXME - remove support for assets\nme.rebuild = function(){\n  var model = me.model;\n  \n  if (me.mesh){\n    var mesh = me.mesh;\n    model.models.splice(model.models.indexOf(mesh),1);\n    if (model.group) model.group.remove(mesh);\n    else model.scene.remove(mesh);\n  }\n  \n  var color = ME.DATA.color ? ME.DATA.color : 0xffff00;\n  \n  ME.DATA.color = color;\n\n  var geometry = null;\n  var d = {'color': color,\n      roughness: 0.5,\n      metalness: 0.5,\n//      shininess: 150,\n//      specular: 0xffffff,\n      flatShading : true \n  };\n  //if (ME.DATA.flatShading) d.flatShading = true;\n  \n  if (typeof ME.DATA.opacity != 'undefined'){\n    d.transparent = true;\n    d.opacity = ME.DATA.opacity;\n  }\n\n  if (ME.DATA.shape == 'sphere'){\n    var radius = ME.DATA.radius ? ME.DATA.radius : 1;\n    var widthSegments = ME.DATA.widthSegments ? ME.DATA.widthSegments : 32;\n    var heightSegments = ME.DATA.heightSegments ? ME.DATA.heightSegments : 32;\n    geometry = new THREE.SphereGeometry( radius, widthSegments, heightSegments );\n  }\n  else if (ME.DATA.shape == 'icosphere'){\n    var radius = ME.DATA.radius ? ME.DATA.radius : 1;\n    var detail = ME.DATA.detail ? ME.DATA.detail : 1;\n    geometry = new THREE.IcosahedronGeometry( radius, detail );\n    d.flatShading = true;\n  }\n  else if (ME.DATA.shape == 'text'){\n    var fname = ME.DATA.font ? ME.DATA.font : '../peerbot/helvetiker_regular.typeface.json';\n    var text = ME.DATA.text ? ME.DATA.text : ME.DATA.text = 'Text';\n    if (!document.body.fonts) document.body.fonts = {};\n    var f = document.body.fonts[fname];\n    if (!f){\n      f = document.body.fonts[fname] = {};\n      f.cbs = [];\n      var loader = new THREE.FontLoader();\n      loader.load( fname, function ( ff ) {\n        f.font = ff;\n        me.rebuild();\n      });\n    }\n    else if (f.font){\n      if (me.mesh){\n        var i = me.model.models.indexOf(me.mesh);\n        me.model.models.splice(i, 1);\n        if (me.model.group) me.model.group.remove(me.mesh);\n        else me.model.scene.remove(me.mesh);\n      }\n      geometry = new THREE.TextGeometry( text, {\n          font: f.font,\n          size: 80,\n          height: 5,\n          curveSegments: 12,\n          bevelEnabled: false,\n          bevelThickness: 10,\n          bevelSize: 8,\n          bevelSegments: 5\n      } );\n      me.getText = function(){ return ME.DATA.text; }\n      me.setText = function(val){\n        ME.DATA.text = val;\n        me.rebuild();\n      };\n      while (f.cbs[0]) f.cbs.shift(0)();\n    }\n    else f.cbs.push(me.rebuild);\n  }\n  else if (ME.DATA.shape == 'stl'){\n    if (me.stlgeometry) {\n      geometry = me.stlgeometry;\n      console.log(me.stlgeometry);\n      me.stlgeometry = null;\n    }\n    else {\n        var loader = new THREE.STLLoader();\n        loader.load(\n          ME.DATA.filename,\n          function (geometry) {\n            me.stlgeometry = geometry;\n            me.rebuild();\n          },\n          (xhr) => {\n              console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n          },\n          (error) => {\n              console.log(error);\n          }\n        );      \n    }    \n  }\n  else if (ME.DATA.shape == 'obj'){\n    if (me.objgeometry) {\n      model.models.push(me.objgeometry);\n      if (model.group) model.group.add(me.objgeometry);\n      else model.scene.add(me.objgeometry);\n      console.log(me.objgeometry);\n      me.objgeometry = null;\n    }\n    else {\n      \n      \n      var mtlLoader = new THREE.MTLLoader();\n      var url = ME.DATA.filename;\n      url = url.substring(0,url.length-3)+'mtl';\n      mtlLoader.load( url, function( materials ) {\n        materials.preload();\n        var loader = new THREE.OBJLoader();\n        //for (var m in materials.materials) console.log(materials.materials[m]);\n        //for (var m in materials.materials) materials.materials[m]= new THREE.MeshStandardMaterial( d );\n        loader.setMaterials( materials );\n        loader.load(\n          ME.DATA.filename,\n          function (mesh) {\n            me.objgeometry = mesh;\n            me.rebuild();\n          },\n          (xhr) => {\n              console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n          },\n          (error) => {\n              console.log(error);\n          }\n        );   \n\n      });\n\n    }    \n  }\n  else if (ME.DATA.shape == 'dae'){\n    if (me.daegeometry) {\n//      geometry = me.daegeometry;\n      model.models.push(me.daegeometry.scene);\n      if (model.group) model.group.add(me.daegeometry.scene);\n      else model.scene.add(me.daegeometry.scene);\n      console.log(me.daegeometry);\n      \n      if (me.model.datgui){\n        var cfolder = me.model.cfolder;\n        var rig = me.model.rig;\n        me.daegeometry.scene.traverse(function(a){\n          if (a instanceof THREE.SkinnedMesh){\n            for (var j in a.skeleton.bones){\n              var child = a.skeleton.bones[j];\n              if (typeof rig[child.name+'_x'] == 'undefined'){\n                var n = child.name;\n//console.log(child);\n                rig[n+'_x'] = child.rotation.x;\n                rig[n+'_y'] = child.rotation.y;\n                rig[n+'_z'] = child.rotation.z;\n                //child.rotation.order=\"YZX\";\n                //child.useQuaternion = false;\n\n                cfolder.add(rig, n+'_x',-3.14, 3.14);\n                cfolder.add(rig, n+'_y',-3.14, 3.14);\n                cfolder.add(rig, n+'_z',-3.14, 3.14);\n              }\n            }\n          }\n        });\n      }\n      \n      me.daegeometry = null;\n    }\n    else {\n      var loader = new THREE.ColladaLoader();\n      loader.load(\n        ME.DATA.filename,\n        function (geometry) {\n          me.daegeometry = geometry;\n          me.rebuild();\n        },\n        (xhr) => {\n            console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n        },\n        (error) => {\n            console.log(error);\n        }\n      );\n    }    \n  }\n  else if (ME.DATA.shape == 'gltf'){\n    if (me.gltfgeometry) {\n//      geometry = me.gltfgeometry;\n      model.models.push(me.gltfgeometry.scene);\n      if (model.group) model.group.add(me.gltfgeometry.scene);\n      else model.scene.add(me.gltfgeometry.scene);\n      console.log(me.gltfgeometry);\n      \n      if (me.model.datgui){\n        var cfolder = me.model.cfolder;\n        var rig = me.model.rig;\n        me.gltfgeometry.scene.traverse(function(a){\n          if (a instanceof THREE.SkinnedMesh){\n            //a.geometry.computeBoundingSphere();\n            a.frustumCulled = false;\n            for (var j in a.skeleton.bones){\n              var child = a.skeleton.bones[j];\n              if (typeof rig[child.name+'_x'] == 'undefined'){\n                var n = child.name;\n//console.log(child);\n                rig[n+'_x'] = child.rotation.x;\n                rig[n+'_y'] = child.rotation.y;\n                rig[n+'_z'] = child.rotation.z;\n                //child.rotation.order=\"YZX\";\n                //child.useQuaternion = false;\n\n                cfolder.add(rig, n+'_x',-3.14, 3.14);\n                cfolder.add(rig, n+'_y',-3.14, 3.14);\n                cfolder.add(rig, n+'_z',-3.14, 3.14);\n              }\n            }\n          }\n        });\n      }\n      \n      me.gltfgeometry = null;\n    }\n    else {\n      var loader = new THREE.GLTFLoader();\n      loader.load(\n        ME.DATA.filename,\n        function (geometry) {\n          me.gltfgeometry = geometry;\n          me.rebuild();\n        },\n        (xhr) => {\n            console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n        },\n        (error) => {\n            console.log(error);\n        }\n      );\n    }    \n  }\n  else if (ME.DATA.shape == 'fbx'){\n    if (me.fbxgeometry) {\n//      geometry = me.daegeometry;\n      model.models.push(me.fbxgeometry);\n      if (model.group) model.group.add(me.fbxgeometry);\n      else model.scene.add(me.fbxgeometry);\n      console.log(me.fbxgeometry);\n      me.fbxgeometry = null;\n    }\n    else {\n      var loader = new THREE.FBXLoader();\n      loader.load(\n        ME.DATA.filename,\n        function (geometry) {\n          me.fbxgeometry = geometry;\n          me.rebuild();\n        },\n        (xhr) => {\n            console.log((xhr.loaded / xhr.total * 100) + '% loaded')\n        },\n        (error) => {\n            console.log(error);\n        }\n      );\n    }    \n  }\n  else {\n    var x = ME.DATA.x ? ME.DATA.x : 1;\n    var y = ME.DATA.y ? ME.DATA.y : 1;\n    var z = ME.DATA.z ? ME.DATA.z : 1;\n    geometry = new THREE.BoxGeometry( x, y, z );\n  }\n  \n  if (geometry){\n    material = new THREE.MeshStandardMaterial( d );\n    var mesh = me.mesh = new THREE.Mesh( geometry, material );\n\n    model.models.push(mesh);\n    if (model.group) model.group.add(mesh);\n    else model.scene.add(mesh);\n  }\n}\n\nme.render = function(model){\n  for (var i in me.animations) me.animations[i](me, now);\n  for (var i in model.models){\n    var model = model.models[i];\n    var rig = me.model.rig;\n    model.traverse(function(a){\n      if (a instanceof THREE.SkinnedMesh){\n        for (var j in a.skeleton.bones){\n          var b = a.skeleton.bones[j];\n          b.rotation.x = rig[b.name+'_x'];\n          b.rotation.y = rig[b.name+'_y'];\n          b.rotation.z = rig[b.name+'_z'];\n        }\n      }\n    });\n  }\n};\n\nme.edit = function(div, cb){\n  var d = {\n    \"list\":[\"cube\",\"sphere\", \"icosphere\", \"text\", \"stl\", \"obj\", \"dae\", \"fbx\", \"gltf\"],\n    \"label\":\"Shape\",\n    \"value\":ME.DATA.shape,\n    \"cb\":function(val){\n      ME.DATA.shape = val;\n      var i = me.model.models.indexOf(me.mesh);\n      me.model.models.splice(i, 1);\n      if (me.model.group) me.model.group.remove(me.mesh);\n      else me.model.scene.remove(me.mesh);\n      me.rebuild();\n      $(div).find('.shapefilename').css('display', ME.DATA.shape == 'stl' || ME.DATA.shape == 'obj' || ME.DATA.shape == 'dae' || ME.DATA.shape == 'fbx' || ME.DATA.shape == 'gltf' ? 'block' : 'none');\n\n      if (cb) cb(ME.DATA);\n    }\n  };\n  \n  var el = $('<div/>');\n  $(div).append(el);\n  installControl(el[0], \"metabot\", \"select\", function(val){}, d);\n\n  el = $('<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label is-dirty\"><input type=\"color\" id=\"html5colorpicker\" value=\"'+ME.DATA.color+'\" style=\"width:60px;\"><label class=\"mdl-textfield__label\" for=\"edit3dctlpos\">Color<\/label><\/div>');\n  el.find('input').change(function(e){\n    ME.DATA.color = $(this).val();\n    me.rebuild();\n    if (cb) cb(ME.DATA);\n  });\n  $(div).append(el);\n  \n  el = $('<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label is-dirty\" style=\"display:block;\"><input type=\"text\" id=\"shapeopacity\" value=\"'+(typeof ME.DATA.opacity == 'undefined' ? '' : ME.DATA.opacity)+'\" style=\"width:60px;\"><label class=\"mdl-textfield__label\" for=\"shapeopacity\">Opacity (blank/0 to 1)<\/label><\/div>');\n  el.find('input').change(function(e){\n    var val = $(this).val();\n    ME.DATA.opacity = Number(val);\n    if (val != (''+ME.DATA.opacity)) delete ME.DATA.opacity;\n    me.rebuild();\n    if (cb) cb(ME.DATA);\n  });\n  $(div).append(el);\n  \n  el = $('<div class=\"shapefilename mdl-textfield mdl-js-textfield mdl-textfield--floating-label is-dirty\" style=\"display:block;\"><input type=\"text\" id=\"filename\" value=\"'+(typeof ME.DATA.filename == 'undefined' ? '' : ME.DATA.filename)+'\" style=\"width:60px;\"><label class=\"mdl-textfield__label\" for=\"filename\">File<\/label><\/div>');\n  el.find('input').change(function(e){\n    var val = $(this).val();\n    ME.DATA.filename = val;\n    me.rebuild();\n    if (cb) cb(ME.DATA);\n  });\n  $(div).append(el);\n  if (ME.DATA.shape != 'stl') el.css('display', 'none');\n  $(div).find('.shapefilename').css('display', ME.DATA.shape == 'stl' || ME.DATA.shape == 'obj' || ME.DATA.shape == 'dae'  || ME.DATA.shape == 'fbx' || ME.DATA.shape == 'gltf' ? 'block' : 'none');\n};\n","groups":"anonymous","ctl":"hmzspn1682ebb4187udc6e","html":"","three":{"controls":[],"assets":[]},"db":"threejs","desc":""},"readers":["anonymous"],"id":"hmzspn1682ebb4187udc6e","sessionid":"jvgvwg16b7a4d277bt3","time":1623853407269,"addr":"/0:0:0:0:0:0:0:1:34982","username":"admin"}