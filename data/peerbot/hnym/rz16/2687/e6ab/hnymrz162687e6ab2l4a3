{"data":{"css":"body {\n    background:#777;\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n","data":[],"name":"viewer","js":"var me = this;\nvar ME = $('#'+me.UUID)[0];\n\nvar container, stats, clock, controls;\nvar camera, scene, renderer, mixer, models, avatar, toload;\n\nvar datprefix = $(ME).data('datguipath') ? $(ME).data('datguipath') : '../test/dat.gui-master/';\nvar libprefix = $(ME).data('threepath') ? $(ME).data('threepath') : '../test/three.js-master/';\nvar libs = [\n  'build/three.min.js',\n  'examples/js/controls/OrbitControls.js',\n  'examples/js/Detector.js',\n  'examples/js/libs/stats.min.js'\n];\n\nmodels = me.models = [];\nvar count = 0;\nvar done = false;\n\nvar callbacks = [];\nme.waitReady = function(cb){\n  callbacks.push(cb);\n  checkIfDone();\n};\n\nfunction checkIfDone(){\n  if (done) {\n    while (callbacks.length>0) callbacks.shift()(me);\n  }\n}\n\nme.add = function(el, db, id, cb){\n  $(el).data('datgui', me.datGUI);\n  $(el).data('scene', scene);\n  $(el).data('db', db);\n\n  installControl(el, db, id, function(api){\n    var ani1 = $(el).data('animations');\n    var ani2 = [];\n    \n    function loadModel(){\n      installControl(el, db, \"jsonloader\", function(api){\n        models.push(api);\n\n        for (var i in ani2) \n          ani2[i].animate(api);\n        if (cb) api.onload(cb);\n      }, {});\n    }    \n\n    if (ani1){\n      function loadNext(){\n        if (ani1.list.length > 0){\n          var ani = ani1.list.shift();\n          installControl(el, db, ani, function(animation){\n            ani2.push(animation);\n            loadNext();\n          }, {});\n        }\n        else loadModel();\n      }\n      loadNext();\n    }\n    else loadModel(api);\n  }, {});\n};\n\nme.ready = function(){\n  var libindex = 0;\n  function loadNext(){\n    if (libindex<libs.length) promise = doAfterLoading(promise, libprefix + libs[libindex++], loadNext);\n    else  {\n      if ( ! Detector.webgl ) Detector.addGetWebGLMessage();\n\n      toload = $(ME).data('controls');\n      if (!toload) toload = [];\n      \n      startup();\n    }\n  }\n  var promise = $.when(true);\n  promise = doAfterLoading(promise,  datprefix+'build/dat.gui.min.js', loadNext);\n};\n\nfunction loadScript( url, cb ) {\n  return $.getScript( url, function() { cb(); });\n}\n\nfunction doAfterLoading(promise, url, cb){\n  return promise.then(function () {\n    return loadScript( url, cb );\n  });\n}\n\nfunction startup(){\n  /*global variables*/\n  var controls, guiControls, datGUI;\n  var stats;\n  var spotLight, hemi;\n  var SCREEN_WIDTH, SCREEN_HEIGHT;\n  var loader, model;\n  \n  \n  function init(){\n    /*creates empty scene object and renderer*/\n    scene = me.scene = new THREE.Scene();\n    camera = scene.camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, .1, 500);\n    renderer = new THREE.WebGLRenderer({antialias:true});\n    \n    renderer.setClearColor(0x333300);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMapEnabled= true;\n    renderer.shadowMapSoft = true;\n    \n    /*add controls*/\n    if ($(ME).data('orbitcontrols') == true){\n      controls = new THREE.OrbitControls( camera, renderer.domElement );\n      controls.addEventListener( 'change', render );\n    }\n    \n    camera.position.x = 6;\n    camera.position.y = 2;\n    camera.position.z = 6;    \n    camera.lookAt(scene.position);\n    \n    me.lastlook = new THREE.Vector3();\n    me.lastlook.copy(scene.position);\n\n    /*datGUI controls object*/\n    guiControls = new function(){\n      this.rotationX  = 0.0;\n      this.rotationY  = 0.0;\n      this.rotationZ  = 0.0;\n      \n      this.lightX = 131;\n      this.lightY = 107;\n      this.lightZ = 180;\n      this.intensity = 1.5;       \n      this.distance = 373;\n      this.angle = 1.6;\n      this.exponent = 38;\n      this.shadowCameraNear = 34;\n      this.shadowCameraFar = 2635;\n      this.shadowCameraFov = 68;\n      this.shadowCameraVisible=false;\n      this.shadowMapWidth=512;\n      this.shadowMapHeight=512;\n      this.shadowBias=0.00;\n      this.shadowDarkness=0.11;\n      \n      this.scene = function(){\n      };\n    }\n      \n    //add some nice lighting\n    hemi = new THREE.HemisphereLight( 0xffffff, 0xffffff );\n    scene.add(hemi);\n    //add some fog\n    scene.fog = new THREE.Fog( 0xffff90, .01, 500 );\n\n    /*adds spot light with starting parameters*/\n    spotLight = new THREE.SpotLight(0xffffff);\n    spotLight.castShadow = true;\n    spotLight.position.set (20, 35, 40);\n    spotLight.intensity = guiControls.intensity;        \n    spotLight.distance = guiControls.distance;\n    spotLight.angle = guiControls.angle;\n    spotLight.exponent = guiControls.exponent;\n    spotLight.shadowCameraNear = guiControls.shadowCameraNear;\n    spotLight.shadowCameraFar = guiControls.shadowCameraFar;\n    spotLight.shadowCameraFov = guiControls.shadowCameraFov;\n    spotLight.shadowCameraVisible = guiControls.shadowCameraVisible;\n    spotLight.shadowBias = guiControls.shadowBias;\n    spotLight.shadowDarkness = guiControls.shadowDarkness;\n    scene.add(spotLight);\n      \n    /*adds controls to scene*/\n    datGUI = me.datGUI = {}; //new dat.GUI();\n//    datGUI.add(guiControls, \"scene\");\n//    datGUI.close();\n\n    datGUI.addFolder = function(){\n      var f = {};\n      var f2 = {};\n      f.add = f2.name = function(){\n        f2.onChange = function(){};\n        return f2;\n      };\n      return f;\n    };\n    \n    $(\"#webGL-container\").append(renderer.domElement);\n//    stats = new Stats();        \n//    stats.domElement.style.position = 'absolute';\n//    stats.domElement.style.left = '0px';\n//    stats.domElement.style.top = '0px';     \n//    $(\"#webGL-container\").append( stats.domElement );\n    \n    var lfolder = datGUI.addFolder('Lights');\n    lfolder.add(guiControls, 'lightX',-60,400); \n    lfolder.add(guiControls, 'lightY',0,400);   \n    lfolder.add(guiControls, 'lightZ',-60,400);\n    \n    lfolder.add(guiControls, 'intensity',0.01, 5).onChange(function(value){\n        spotLight.intensity = value;\n    });     \n    lfolder.add(guiControls, 'distance',0, 1000).onChange(function(value){\n        spotLight.distance = value;\n    }); \n    lfolder.add(guiControls, 'angle',0.001, 1.570).onChange(function(value){\n        spotLight.angle = value;\n    });     \n    lfolder.add(guiControls, 'exponent',0 ,50 ).onChange(function(value){\n        spotLight.exponent = value;\n    });\n    lfolder.add(guiControls, 'shadowCameraNear',0,100).name(\"Near\").onChange(function(value){       \n        spotLight.shadowCamera.near = value;\n        spotLight.shadowCamera.updateProjectionMatrix();        \n    });\n    lfolder.add(guiControls, 'shadowCameraFar',0,5000).name(\"Far\").onChange(function(value){\n        spotLight.shadowCamera.far = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowCameraFov',1,180).name(\"Fov\").onChange(function(value){\n        spotLight.shadowCamera.fov = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowCameraVisible').onChange(function(value){\n        spotLight.shadowCameraVisible = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowBias',0,1).onChange(function(value){\n        spotLight.shadowBias = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    lfolder.add(guiControls, 'shadowDarkness',0,1).onChange(function(value){\n        spotLight.shadowDarkness = value;\n        spotLight.shadowCamera.updateProjectionMatrix();\n    });\n    \n\tfor (var i in toload) {\n      var ctl = toload[i];\n      var el = $('<div id=\"m'+(count++)+'_'+ctl.name+'\"/>')[0];\n      $(ME).append(el);\n      me.add(el, ctl.db, ctl.name);\n    }\n    \n    animate();\n      \n    done = true;\n    checkIfDone();\n  }\n      \n  function render() { \n    spotLight.position.x = guiControls.lightX;\n    spotLight.position.y = guiControls.lightY;\n    spotLight.position.z = guiControls.lightZ;\n    \n    for (var i in models) models[i].render();\n    \n    scene.traverse(function(child) {\n      if  (child instanceof THREE.SkeletonHelper) child.update();\n    });\n    \n    if (me.focus){\n      var model = me.focus;\n      var rig = model.rig;\n      var v = new THREE.Vector3( rig.pos_x, rig.pos_y, rig.pos_z );\n      var d = v.distanceTo(camera.position);\n      \n      var v2 = new THREE.Vector3();\n      v2.copy(camera.position);\n      v2.sub(v);\n      if (d>1.1) {\n        v2.multiplyScalar(0.02);\n        camera.position.sub(v2);\n        \n        v2.copy(me.lastlook);\n        v2.sub(v);\n        v2.multiplyScalar(0.2);\n        me.lastlook.sub(v2);\n        camera.lookAt(me.lastlook);\n      }\n      else {\n        v2.normalize();\n        v2.add(v);\n        camera.position.copy(v2);\n        camera.lookAt(v);\n      }\n    }\n  }\n  \n  function animate(){\n    requestAnimationFrame(animate);\n    render();\n//    stats.update();     \n    renderer.render(scene, camera);\n  }\n  \n  init();\n  \n  $(window).resize(function(){\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n    camera.updateProjectionMatrix();\n    renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );\n  });\n  \n}","groups":"","ctl":"hnymrz162687e6ab2l4a3","html":"<div id =\"webGL-container\" />","db":"peerbot","desc":""},"id":"hnymrz162687e6ab2l4a3","sessionid":"jhtpuq15d03ce0a74q0","time":1531150056038,"username":"mraiser"}