{"data":{"css":"","data":[],"name":"peer","js":"var me = this;\nvar ME = $('#'+me.UUID)[0];\n\nvar network = ME.DATA.network;\n\nvar pos1 = new THREE.Vector3();\nvar pos2 = new THREE.Vector3();\nvar dv = new THREE.Vector3();\nvar v = new THREE.Vector3();\nvar d = 0;\nvar count = 1;\nvar rig1 = null;\nvar rig2 = null;\nvar rapi = null;\nvar i = 0;\nvar c = 0;\nvar orb = null;\nvar tex = null;\n\nme.lines = [];\n\nme.click = function(event){\n  network.focus(me);\n};\n\n//var MAXCONCURRENTAJAX = 2;\n//if (typeof document.body.numajax == 'undefined') document.body.numajax = 0;\n\nme.animate = function(model){\n  me.model = model;\n  model.data = ME.DATA;\n  \n  function refresh(){\n    if (ME.DATA.connected){\n      \n      me.lastcheck = new Date().getTime();\n      setTimeout(checkRefresh, 15000);\n      json('../peerbot/remote/'+model.data.id+'/peerbot/lookup', 'uuids='+encodeURIComponent(network.uuids), function(result){\n        console.log('######## json received from '+ME.DATA.name);\n        while (me.lines[0]) me.model.scene.remove(me.lines.pop());\n        me.cons = result;\n      \n        setTimeout(refresh, 10000);\n      });\n      \n      \n      \n/*      \n      if (!me.isneedtoKillAjax && document.body.numajax < MAXCONCURRENTAJAX) {\n        document.body.numajax++;\n        console.log('######## sending ajax to '+ME.DATA.name);\n\n        me.isneedtoKillAjax = true;\n        setTimeout(function() { if(me.isneedtoKillAjax) me.myAjaxCall.abort(); console.log('######## ajax KILLED to '+ME.DATA.name); }, 10000);\n        \n        me.myAjaxCall = $.getJSON('../peerbot/remote/'+model.data.id+'/peerbot/lookup?uuids='+encodeURIComponent(network.uuids), function(result){\n          me.isneedtoKillAjax = false;\n          console.log('######## json received from '+ME.DATA.name);\n           while (me.lines[0]) me.model.scene.remove(me.lines.pop());\n          me.cons = result;\n          setTimeout(refresh, 5000);\n        }).always(function() {\n          me.isneedtoKillAjax = false;\n          document.body.numajax--;\n          console.log('######## ajax complete with '+ME.DATA.name);\n        });\n      }\n      else setTimeout(refresh, 500);\n*/      \n      \n      \n      \n      \n    }\n    else{\n      while (me.lines[0]) me.model.scene.remove(me.lines.pop());\n      setTimeout(refresh, 5000);\n    }\n  }\n  refresh();\n  \n  \n  \n  function checkRefresh(){\n    var delta = new Date().getTime() - me.lastcheck;\n    if (delta > 15000){\n      console.log(\"No response from \"+ME.DATA.name+\" in \"+(delta/1000)+\" seconds.\");\n      //debugger;\n      // FIXME - No additional checks or refreshes will be performed unless original request gets response\n    }\n  }\n  \n  \n};\n\nme.render = function(model){\n  count = 0;\n  dv.set(0,0,0);\n  rig1 = model.rig;\n  pos1.set(rig1.pos_x,rig1.pos_y,rig1.pos_z);\n  if (ME.DATA.connected){\n    d = pos1.distanceTo(dv);\n    dv.sub(pos1).normalize().multiplyScalar(0.1*d*d);\n    count++;\n  }\n\n  for (i in network.all){\n    if (i != ME.DATA.id){\n      rapi = network.all[i].el.api;\n      if (rapi && rapi.rig){\n        rig2 = rapi.rig;\n        pos2.set(rig2.pos_x,rig2.pos_y,rig2.pos_z);\n        d = pos2.distanceTo(pos1);\n        v.copy(pos1).sub(pos2).normalize().multiplyScalar(1/(d*d));\n        dv.add(v);\n        count++;\n        \n        if (me.cons && rapi.data && me.cons[rapi.data.id]){\n          var con = me.cons[rapi.data.id];\n          if (con.connected){\n            if (!rapi.api.cons) rapi.api.cons = {};\n            if (!rapi.api.cons[ME.DATA.id]) rapi.api.cons[ME.DATA.id] = con;\n            var r1 = me.model.rig;\n            var r2 = rapi.rig;\n            if (ME.DATA.connected && rapi.data.connected && !con.line){\n              \n              \n              var points = [];\n              points.push(\n                new THREE.Vector3(r1.pos_x,r1.pos_y,r1.pos_z),\n                new THREE.Vector3(r2.pos_x,r2.pos_y,r2.pos_z)\n              );\n              var geometry = new THREE.BufferGeometry().setFromPoints( points );\n              \n              \n              \n//              var geometry = new THREE.Geometry();\n//              geometry.vertices.push(\n//                  new THREE.Vector3(r1.pos_x,r1.pos_y,r1.pos_z),\n//                  new THREE.Vector3(r2.pos_x,r2.pos_y,r2.pos_z)\n//              );\n              var color = con.tcp ? 0x00ff00 : 0xffff00;\n              var material = new THREE.LineBasicMaterial( { color: color } );\n              var mesh = new THREE.Line( geometry, material );\n              me.model.scene.add(mesh);\n              con.line = mesh;\n              me.lines.push(mesh);\n            }\n            else if (ME.DATA.connected && rapi.data.connected){\n              var p = con.line.geometry.attributes.position.array;\n              p[0] = r1.pos_x;\n              p[1] = r1.pos_y;\n              p[2] = r1.pos_z;\n              p[3] = r2.pos_x;\n              p[4] = r2.pos_y;\n              p[5] = r2.pos_z;\n              con.line.geometry.attributes.position.needsUpdate = true;\n              var vs = [ new THREE.Vector3(r1.pos_x,r1.pos_y,r1.pos_z), new THREE.Vector3(r2.pos_x,r2.pos_y,r2.pos_z) ];\n\n//              var vs = con.line.geometry.vertices;\n//              vs[0].set(r1.pos_x,r1.pos_y,r1.pos_z);\n//              vs[1].set(r2.pos_x,r2.pos_y,r2.pos_z);\n//              con.line.geometry.verticesNeedUpdate = true;\n              if (con.tcp){\n                d = vs[1].distanceTo(vs[0]);\n                v.copy(vs[1]).sub(vs[0]).normalize().multiplyScalar(0.01*d*d);\n                dv.add(v);\n                count++;\n                con.line.material.color.r = 0;\n                con.line.material.color.g = 0.5;\n                con.line.material.color.b = 0;\n              }\n              else{\n                con.line.material.color.r = 0.5;\n                con.line.material.color.g = 0.5;\n                con.line.material.color.b = 0;\n              }\n            }\n            else {\n              if (con.line){\n                var w = me.lines.indexOf(con.line);\n                if (w != -1) {\n                  me.model.scene.remove(con.line);\n                  me.lines.splice(w,1);\n                }\n              }\n            }\n          }\n          else{\n            if (con.line){\n              var w = me.lines.indexOf(me.line);\n              if (w != -1) {\n                me.model.scene.remove(me.line);\n                me.lines.splice(w,1);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (count>0){\n    dv.multiplyScalar(1/count);\n\n    rig1.pos_x += dv.x;\n    rig1.pos_y += dv.y;\n    rig1.pos_z += dv.z;\n  }\n  \n  if (me.children && me.children[0] && me.children[0].api){\n    orb = me.children[0].api;\n    \n    if (orb.model.rig){\n      rig2 = orb.model.rig;\n      rig2.rot_y += rig1.speed/25; //0.01;\n      if (rig2.rot_y > TWOPI) rig2.rot_y -= TWOPI;\n    }\n    \n    c = 1 - Math.min(1, 1/((new Date().getTime() - ME.DATA.lastcontact + network.timedelta)/15000));\n    if (ME.DATA.connected){\n      if (ME.DATA.tcp) orb.setColor(c,1,c);\n      else orb.setColor(1,1,c);\n    }\n    else orb.setColor(1,1,1);\n  }\n\n  if (me.children && me.children[1] && me.children[1].api){\n    tex = me.children[1].api;\n    if (tex.data.text != ME.DATA.name) {\n      if (tex.setText) tex.setText(ME.DATA.name);\n      else tex.data.name = ME.DATA.name;\n      me.children[1].models[0].geometry.center();\n    }\n    rig1.rot_x = me.model.scene.camera.rotation.x;\n    rig1.rot_y = me.model.scene.camera.rotation.y;\n    rig1.rot_z = me.model.scene.camera.rotation.z;\n  }\n};\n\nvar TWOPI = Math.Pi * 2;","groups":"anonymous","ctl":"wmhxgt168c93a4c7eo79","html":"","three":{"controls":[{"color":"#000000","shape":"icosphere","pos":{"x":0,"y":0,"z":0},"rot":{"x":0,"y":0,"z":0},"name":"orb","scale":{"x":1,"y":1,"z":1},"id":"hmzspn1682ebb4187udc6e","uuid":"100b31da-1e89-4fb1-b513-f4b39065e0a5","db":"threejs"},{"color":"#ffffff","shape":"text","pos":{"x":"0","y":"1.3","z":"0"},"rot":{"x":0,"y":0,"z":0},"name":"shape","scale":{"x":"0.005","y":"0.005","z":"0.005"},"id":"hmzspn1682ebb4187udc6e","text":"Text","uuid":"6df0ede3-8e7a-4ee1-b3af-99ae53631d0c","db":"threejs"}],"assets":[],"behaviors":[],"animations":[],"poses":[]},"db":"peerbot","desc":""},"readers":["anonymous"],"id":"wmhxgt168c93a4c7eo79","sessionid":"jvgvwg16b7a4d277bt3","time":1637249506344,"addr":"/0:0:0:0:0:0:0:1:53814","username":"admin"}