{"writers":[],"id":"irxuhn18379cef5bcp4","username":"system","time":1755523540749,"data":{"import":"use std::num::ParseIntError;\nuse std::net::TcpStream;\nuse std::io::Read;\nuse std::io::Write;\nuse std::thread;\nuse std::sync::Once;\n// Removed: use state::Storage;\n// Removed: use std::sync::RwLock; // Replaced by SharedMutex logic\nuse std::net::TcpListener;\nuse ndata::data::*;\nuse flowlang::datastore::DataStore;\nuse flowlang::flowlang::system::unique_session_id::unique_session_id;\nuse aes::Aes256;\nuse aes::cipher::{\n    BlockEncrypt, KeyInit,\n    generic_array::GenericArray,\n};\nuse aes::cipher::BlockDecrypt;\nuse flowlang::flowlang::system::time::time;\nuse flowlang::flowlang::file::write_properties::write_properties;\nuse crate::app::service::init::handle_command;\nuse flowlang::appserver::fire_event;\nuse crate::peer::peer::peers::user_to_peer;\nuse std::io;\nuse std::net::SocketAddr;\nuse ndata::dataarray::DataArray;\nuse ndata::databytes::DataBytes;\nuse crate::peer::service::listen_udp::UdpStream; // Assuming UdpStream has a duplicate method\nuse std::net::Shutdown;\nuse std::time::Duration;\nuse std::collections::HashMap;\nuse std::path::Path;\nuse std::fs;\nuse crate::security::security::init::get_user;\nuse crate::security::security::init::set_user;\nuse core::sync::atomic::{AtomicBool, AtomicPtr, Ordering as AtomicOrdering, AtomicUsize}; // Added AtomicUsize\n// use core::cell::UnsafeCell; // No longer needed for GlobalSharedMutex directly\nuse std::fmt;\n\nuse flowlang::x25519::*;\nuse flowlang::rand::*;\n\n// Import SharedMutex from ndata crate\nuse ndata::sharedmutex::SharedMutex; \n","desc":"Initializes and starts a TCP server to listen for incoming peer-to-peer connections on the specified IP address and port, returning the actual bound port. Each new connection is then securely handshaked and managed for ongoing P2P communication.","lib":"peer","cmd":"listen","ctl":"service","attachmentkeynames":["rs"],"returntype":"Integer","params":[{"type":"String","name":"ipaddr","desc":"Specifies the local IP address on which the command will bind to listen for incoming network connections."},{"type":"Integer","name":"port","desc":"Specifies the desired network port for the command to bind and listen for incoming TCP connections. Providing `0` will dynamically assign an available ephemeral port."}],"type":"rust"},"readers":[]}