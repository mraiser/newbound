{"username":"system","data":{"ctl":"service","import":"use std::io;\nuse std::net::UdpSocket;\nuse flowlang::datastore::DataStore;\nuse crate::peer::service::listen::decode_hex;\n//use x25519_dalek::StaticSecret;\n//use rand::rngs::OsRng;\n//use x25519_dalek::PublicKey;\nuse aes::Aes256;\nuse crate::peer::service::listen::encrypt;\nuse aes::cipher::KeyInit;\nuse aes::cipher::generic_array::GenericArray;\n// Removed: use std::sync::RwLock;\nuse std::sync::Once;\n// Removed: use state::Storage;\nuse ndata::sharedmutex::GlobalSharedMutex; // Using GlobalSharedMutex\nuse crate::peer::service::listen::decrypt;\nuse ndata::databytes::DataBytes;\nuse crate::peer::service::listen::to_hex;\nuse crate::peer::service::listen::P2PConnection;\nuse crate::peer::service::listen::P2PStream;\nuse ndata::dataarray::DataArray;\nuse std::net::SocketAddr;\nuse std::thread;\nuse std::time::Duration;\nuse ndata::data::Data;\nuse flowlang::flowlang::system::time::time;\nuse std::io::Error;\nuse std::io::ErrorKind;\nuse crate::peer::service::listen::handle_connection;\n//use rand::RngCore;\nuse crate::security::security::init::get_user;\nuse crate::security::security::init::set_user;\nuse flowlang::appserver::fire_event;\n\nuse flowlang::x25519::*;\nuse flowlang::rand::fill_bytes;\n","params":[{"name":"ipaddr","desc":"The IP address string on which the UDP socket will bind and listen for incoming connections. Use \"0.0.0.0\" to listen on all available network interfaces.","type":"String"},{"name":"port","type":"Integer","desc":"The UDP port number on which the socket will bind and listen for incoming P2P connections."}],"type":"rust","returntype":"Integer","cmd":"listen_udp","desc":"This command initializes and starts a UDP listener on the specified IP address and port, facilitating secure peer-to-peer communication. It returns the port number on which it is listening.","lib":"peer","attachmentkeynames":["rs"]},"id":"rgxowg183ad6b7a12u6","time":1754139643525,"writers":[],"readers":[]}