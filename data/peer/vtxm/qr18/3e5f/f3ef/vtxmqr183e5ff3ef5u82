{"id":"vtxmqr183e5ff3ef5u82","username":"system","readers":[],"data":{"returntype":"String","attachmentkeynames":["rs"],"type":"rust","params":[],"ctl":"service","cmd":"discovery","lib":"peer","import":"use ndata::data::Data;\nuse ndata::sharedmutex::SharedMutex;\nuse std::net::UdpSocket;\nuse std::sync::Once;\nuse flowlang::datastore::DataStore;\nuse std::thread;\nuse core::time::Duration;\n\n// Assuming these are from your project structure\nuse crate::peer::service::udp_connect::udp_connect;\nuse crate::peer::service::listen::get_udp;\nuse crate::peer::service::listen::get_tcp;\nuse flowlang::flowlang::system::time::time;\nuse crate::security::security::init::get_user;\n\nstatic mut DISCOVERY_SOCKET_MUTEX: Option<SharedMutex<UdpSocket>> = None;\nstatic INIT_DISCOVERY_MUTEX: Once = Once::new();","desc":"On first run, this initializes a UDP broadcast discovery service that continuously announces local peer details and listens for remote peers, populating the global data store with their information."},"time":1754139038663,"writers":[]}