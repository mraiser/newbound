{"data":{"attachmentkeynames":["rs"],"cmd":"discovery","ctl":"service","desc":"\"Discover and store peer information for a distributed system\"","import":"use ndata::data::Data;\nuse ndata::sharedmutex::SharedMutex;\nuse std::net::UdpSocket;\nuse std::sync::Once;\nuse flowlang::datastore::DataStore;\nuse std::thread;\nuse core::time::Duration;\n\n// Assuming these are from your project structure\nuse crate::peer::service::udp_connect::udp_connect;\nuse crate::peer::service::listen::get_udp;\nuse crate::peer::service::listen::get_tcp;\nuse flowlang::flowlang::system::time::time;\nuse crate::security::security::init::get_user;\n\nstatic mut DISCOVERY_SOCKET_MUTEX: Option<SharedMutex<UdpSocket>> = None;\nstatic INIT_DISCOVERY_MUTEX: Once = Once::new();","lib":"peer","params":[],"returntype":"String","type":"rust"},"id":"vtxmqr183e5ff3ef5u82","readers":[],"time":1748702091245,"username":"system","writers":[]}