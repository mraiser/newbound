package com.newbound.code;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.FileObject;
import javax.tools.ForwardingJavaFileManager;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import javax.tools.SimpleJavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

import com.newbound.robot.BotBase;
import com.newbound.robot.BotUtil;
import com.newbound.robot.JSONTransform;
import com.newbound.robot.MetaBot;

import javax.tools.JavaCompiler.CompilationTask;
import javax.tools.JavaFileManager.Location;
import javax.tools.JavaFileObject.Kind;

import org.json.JSONArray;
import org.json.JSONObject;

public class JavaCommand 
{
	private String DB = "chuckme";
	private String CTL = "junk";
	private String CMD = "testing";
	
	private ClassLoader CL = new ClassLoader() 
	{
		Hashtable<String, ByteArrayOutputStream> CACHE = new Hashtable();

		@Override
		public Class<?> loadClass(String name) throws ClassNotFoundException 
		{
			if (name.startsWith("com.newbound.robot.published.botmanager.code.")) try 
			{ 
				byte[] raw = compile(name);
				return defineClass( name, raw, 0, raw.length );
			} 
			catch (Exception x) 
			{ 
				throw new ClassNotFoundException(x.getMessage()); 
			}
			
			return getParent().loadClass(name);
		}

		private byte[] compile(final String name) throws Exception 
		{
			final String java = buildJava(name);
			
		    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		    DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();

	        JavaFileObject src = new SimpleJavaFileObject(URI.create("string:///" + name.replace('.','/') + Kind.SOURCE.extension),Kind.SOURCE)
	        {
	        	@Override
	        	public CharSequence getCharContent(boolean ignoreEncodingErrors) 
	        	{
	        		return java;
	        	}
	        };
			
	        final StandardJavaFileManager sjfm = compiler.getStandardFileManager(diagnostics, null, null);
			JavaFileManager jfm = new ForwardingJavaFileManager<StandardJavaFileManager>(sjfm) 
			{
				@Override
				public JavaFileObject getJavaFileForOutput(Location location, final String className, JavaFileObject.Kind kind, FileObject sibling) throws IOException
				{
					return new SimpleJavaFileObject(URI.create("bytes:///"+className + className.replaceAll("\\.", "/") + Kind.CLASS.extension), Kind.CLASS)
		    		{
				        @Override
				        public OutputStream openOutputStream() throws IOException {
				        	ByteArrayOutputStream baos = new ByteArrayOutputStream();
				        	CACHE.put(className, baos);
				            return baos;
				        }
		    		};
				}
			};

			Iterable<? extends JavaFileObject> compilationUnits = Arrays.asList(src);
			
			String version = System.getProperty("java.version");
			version = version.startsWith("1.8") ? "1.8" : "1.6";

			char cc = File.pathSeparatorChar;
			String path = System.getProperty("java.class.path");
			String[] list = path.split(""+cc);
			path = "";
			int i = list.length;
			while (i-->0)
			{
				File f = new File(list[i]);
				if (f.exists())
				{
					if (!path.equals("")) path = cc + path;
					path = list[i]+path;
				}
			}
			
			File root = BotBase.getBot("botmanager").getRootDir().getParentFile().getParentFile();
			
			Vector<File> jars = new Vector();
			File lib = new File(root, "lib");
			lib.mkdirs();
			String[] libs = lib.list();
			int j = libs.length;
			while (j-->0) path += cc+new File(lib, libs[j]).getCanonicalPath();
			
			path = new File(root, "bin").getCanonicalPath()+cc+path;
			
			String[] commandLine =  {"-source", version, "-target", version, "-cp", path, "-Xlint:none", "-Xlint:-unchecked", "-proc:none" };
			Iterable<String> options = Arrays.asList(commandLine);
			
			CompilationTask task = compiler.getTask(null, jfm, diagnostics, options, null, compilationUnits);

			String out = "";
			boolean success = task.call();
//			out += "SUCCESS: "+success+"\n";
			if (!success) for (Diagnostic diagnostic : diagnostics.getDiagnostics()) {
				if (diagnostic.getKind().equals(javax.tools.Diagnostic.Kind.ERROR))
				{
			      out += diagnostic.getCode()+"\n";
			      out += diagnostic.getKind()+"\n";
			      out += diagnostic.getPosition()+"\n";
			      out += diagnostic.getStartPosition()+"\n";
			      out += diagnostic.getEndPosition()+"\n";
			      out += diagnostic.getSource()+"\n";
			      out += diagnostic.getMessage(null)+"\n";
				}
			}

			ByteArrayOutputStream baos = CACHE.get(name);
			return baos.toByteArray();
		}

		private String buildJava(String name) throws Exception
		{
			MetaBot mb = (MetaBot)BotBase.getBot("metabot");
			
			JSONObject DATA = mb.getData(DB, mb.lookupCtlID(DB, CTL)).getJSONObject("data");
			
			JSONObject jo = null;
			JSONArray ja = DATA.getJSONArray("cmd");
			int i = ja.length();
			while (i-->0)
			{
				jo = ja.getJSONObject(i);
				if (jo.getString("name").equals(CMD)) break;
			}

			JSONObject src = mb.getData(DB, jo.getString("java")).getJSONObject("data");
			
			String java = src.getString("java");
			JSONArray params = src.has("params") ? src.getJSONArray("params") : new JSONArray();
			String imports = src.getString("import");
			String returntype = src.getString("returntype");
			
			return toJava(DB, name, java, params, imports, returntype); //"public class "+name+" {}";
		}
		
	};
	
	
	private String toJava(String db, String claz, String java, JSONArray p, String imports, String returntype) throws Exception
	{
		String id = claz.substring(claz.lastIndexOf('.')+1);
		if (returntype == null) returntype = "JSONObject";
		if (imports == null) imports = "import org.json.*;\rimport com.newbound.robot.*;\rimport com.newbound.robot.published.*;\rimport com.newbound.util.*;\r";
		else imports = imports.replace('\n', '\r');
		
		int n = p.length();
		int i;
		String top = "";
		String bottom = "";
		String invoke = "";
		String invoke2 = "";
		for (i=0;i<n;i++)
		{
			if (!invoke.equals("")) invoke += ", ";

			JSONObject o = p.getJSONObject(i);
			String typ = o.getString("type");
			String name = o.getString("name");
			if (typ.equals("Data"))
			{
				String pdid = o.getString("id");
				top += "JSONObject "+name+" = BotBase.getBot(\"botmanager\").getData(\""+db+"\", \""+pdid+"\").getJSONObject(\"data\");\r";
				bottom += "BotBase.getBot(\"botmanager\").setData(\""+db+"\", \""+pdid+"\", "+name+", null, null);\r";
				invoke += "JSONObject "+name;
			}
			else if (typ.equals("Bot"))
			{
				top += "BotBase "+name+" = BotBase.getBot(\""+name+"\");\r";
				invoke += "BotBase "+name;
			}
			else 
			{
				if (typ.equals("JSONObject")) top += "JSONObject "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof JSONObject ? input.getJSONObject(\""+name+"\") : new JSONObject(\"\"+input.get(\""+name+"\"));\r";
				else if (typ.equals("JSONArray")) top += "JSONArray "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof JSONArray ? input.getJSONArray(\""+name+"\") : new JSONArray(\"\"+input.get(\""+name+"\"));\r";
				else if (typ.equals("Integer")) top += "int "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof Integer ? input.getInt(\""+name+"\") : Integer.parseInt(\"\"+input.get(\""+name+"\"));\r";
				else if (typ.equals("Long")) top += "long "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof Long ? input.getLong(\""+name+"\") : Long.parseLong(\"\"+input.get(\""+name+"\"));\r";
				else if (typ.equals("Double")) top += "double "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof Double ? input.getDouble(\""+name+"\") : Double.parseDouble(\"\"+input.get(\""+name+"\"));\r";
				else if (typ.equals("Float")) top += "float "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof Float ? input.getFloat(\""+name+"\") : Float.parseFloat(\"\"+input.get(\""+name+"\"));\r";
				else if (typ.equals("Boolean")) top += "boolean "+name+" = !input.has(\""+name+"\") ? null : input.get(\""+name+"\") instanceof Boolean ? input.getBoolean(\""+name+"\") : Boolean.parseBoolean(\"\"+input.get(\""+name+"\"));\r";
				else top += o.getString("type")+" "+name+" = !input.has(\""+name+"\") ? null : input.get"+typ+"(\""+name+"\");\r";
				invoke += o.getString("type")+" "+name;
			}
			
			if (!invoke2.equals("")) invoke2 += ", ";
			invoke2 += name;
		}
		
		if (returntype.equals("FLAT"))
		{
			top += "\rjo = doit("
				+invoke2
				+");\rif (!jo.has(\"status\")) jo.put(\"status\", \"ok\");\r"
				+bottom
				+"}catch (Exception x) { x.printStackTrace(); jo = new JSONObject(); try { jo.put(\"status\", \"err\"); jo.put(\"msg\", x.getMessage());} catch (Exception xx) {xx.printStackTrace();} }\rreturn jo;\r}\r\rprivate JSONObject doit("+invoke+") throws Exception {\r";
		}
		else top += "jo = new JSONObject();\rjo.put(\"data\",doit("
			+invoke2
			+"));\rjo.put(\"status\", \"ok\");\r"
			+bottom
			+"}catch (Exception x) { x.printStackTrace(); jo = new JSONObject(); try { jo.put(\"status\", \"err\"); jo.put(\"msg\", x.getMessage());} catch (Exception xx) {xx.printStackTrace();} }\rreturn jo;\r}\r\rprivate "
			+returntype
			+" doit("+invoke+") throws Exception {\r";
		
		java = "package com.newbound.robot.published.botmanager.code;"
		    + "\r\r"+imports+"\r"
		    + "public class "+id+" implements JSONTransform {\r"
		    + "public JSONObject execute(JSONObject input) {\r"
		    + "JSONObject jo;\r\rtry{\r"
		    + top
		    + java.replace('\n', '\r')
		    + "\r}"
		    + "public JSONObject call(String cmd, JSONObject params) throws Exception\r{\rreturn call(\""+id+"\", cmd, params);\r}\r"
		    + "public JSONObject call(String ctl, String cmd, JSONObject params) throws Exception\r{\rreturn call(\""+db+"\", ctl, cmd, params);\r}\r"
		    + "public JSONObject call(String db, String ctl, String cmd, JSONObject params) throws Exception\r{\rreturn ((com.newbound.robot.MetaBot)BotBase.getBot(\"metabot\")).call(db, ctl, cmd, params);\r}\r"
		    + "}";
		  
		return java;
	}

	
	public JavaCommand(String db, String ctl, String cmd)
	{
		DB = db;
		CTL = ctl;
		CMD = cmd;
	}
	
	public JSONObject execute(JSONObject args) throws Exception
	{
		Class claz = CL.loadClass("com.newbound.robot.published.botmanager.code."+BotUtil.uniqueSessionID());
		
		// FIXME - cannot be cast to com.newbound.robot.JSONTransform
		JSONTransform jt = (JSONTransform)claz.newInstance();
		
		return jt.execute(args);
	}

	public static void main(String[] args) 
	{
		try
		{
			JSONObject jo = new JSONObject();
			System.out.println(new JavaCommand("taskbot", "metabot", "apps").execute(jo));
		}
		catch (Exception x) { x.printStackTrace(); }
	}
}
